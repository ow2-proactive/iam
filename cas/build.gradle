apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'antlr'
apply plugin: 'jacoco'
apply plugin: 'maven'

apply plugin: 'org.springframework.boot'
apply from: 'https://dl.bintray.com/scalding/generic/waroverlay.gradle'
apply from: 'https://raw.githubusercontent.com/apereo/cas/5.2.x/gradle/overrides.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'

group = 'org.ow2.proactive'
version = project.iamVersion

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

    compile.exclude group: "org.apache.directory.api", module: "api-ldap-schema-data"
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

uploadArchives {
    repositories {
        mavenDeployer {

            snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                authentication(userName: "${System.getProperty('nexusUsername')}",
                        password: "${System.getProperty('nexusPassword')}")
            }
            repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                authentication(userName: "${System.getProperty('nexusUsername')}",
                        password: "${System.getProperty('nexusPassword')}")
            }
        }
    }
}

sourceSets {

    integrationTest {
        java {
            srcDir file('src/integrationTest/java')
            compileClasspath = sourceSets.main.output + configurations.integrationTestCompile
            runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

springBoot {
    mainClass = "org.apereo.cas.web.CasWebApplication"
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
}

dependencies {

    // Use Jetty as web app server
    compile "org.apereo.cas:cas-server-webapp-jetty:${project.'version.cas'}@war"

    // CAS Web App
    compile "org.apereo.cas:cas-server-webapp-init:${project.'version.cas'}"

    // CAS JSON service registry
    compile "org.apereo.cas:cas-server-support-json-service-registry:${project.'version.cas'}"

    // CAS REST
    compile "org.apereo.cas:cas-server-support-rest:${project.'version.cas'}"

    // CAS REST for JWT
    compile "org.apereo.cas:cas-server-support-rest-tokens:${project.'version.cas'}"

    // CAS JWT
    compile "org.apereo.cas:cas-server-support-token-tickets:${project.'version.cas'}"

    // CAS File-based authentication
    compile "org.apereo.cas:cas-server-support-generic:${project.'version.cas'}"

    //  To support SpringBootServletInitializer (when IAM is deployed as a traditional WAR file)
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'

    // To load IAM certificate into the keystore of the running java system (i.e., the underlying jvm)
    compile group: 'com.oneandone', name: 'composite-jks', version: '1.0'
}

war {
    baseName 'iam'
    version = project.iamVersion
    includeWarJars = true
    entryCompression = ZipEntryCompression.STORED

    manifest {
        //attributes 'Start-Class': 'org.ow2.proactive.iam.startup.IAMApplication'
        attributes 'Start-Class': 'org.apereo.cas.web.CasWebApplication'
    }
}

task run(group: "build", description: "Run the IAM web application in embedded container mode") {
    dependsOn build
    doLast {
        def iamRunArgs = Arrays.asList(project.'iam.run.jvmArgs'.split(" "))
        javaexec {
            main = "-jar"
            jvmArgs = iamRunArgs
            args = ["build/libs/iam-${project.iamVersion}.war"]

            logger.info "Started ${commandLine}"
        }
    }
}

task debug(group: "build", description: "Debug the IAM web application in embedded mode on port 5005") {
    dependsOn build
    doLast {
        def iamRunArgs = Arrays.asList(project.'iam.debug.jvmArgs'.split(" "))
        javaexec {
            main = "-jar"
            jvmArgs = iamRunArgs
            args = ["build/libs/iam-${project.iamVersion}.war"]

            logger.info "Started ${commandLine}"
        }
    }
}

task unzipFatWar(type: Copy) {
    def zipFile = file("${buildDir}/libs/iam-${project.iamVersion}.war")
    def outputDir = file("${buildDir}/libs/iam")

    from zipTree(zipFile)
    into outputDir

    rename ('application.properties', 'application-default.properties')
}

task thinWar(type: War){
    from ("${buildDir}/libs/iam")

    // remove unused dependencies
    exclude('**/WEB-INF/lib/cas-server-webapp-jetty-*.war')

    rootSpec.exclude("**/groovy*-2.4.12.jar")
    rootSpec.exclude("**/log4j-*-2.9.1.jar")
    rootSpec.exclude("**/commons-codec-1.10.jar")
    rootSpec.exclude("**/commons-pool2-2.4.3.jar")
    rootSpec.exclude("**/hibernate-*-5.2.13.Final.jar")
    rootSpec.exclude("**/hibernate-validator-5.3.6.Final.jar")
    rootSpec.exclude("**/HikariCP-2.7.7.jar")
    rootSpec.exclude("**/httpcore-4.4.8.jar")
    rootSpec.exclude("**/jackson-*-2.9.0.jar")
    rootSpec.exclude("**/javassist-3.21.0-GA.jar")
    rootSpec.exclude("**/okhttp-2.7.5.jar")

    rootSpec.exclude("**/spring-boot-devtools-*.jar")
    rootSpec.exclude("**/spring-*-4.3.16.RELEASE.jar")
    //rootSpec.exclude("**/spring-boot*-1.5.12.RELEASE.jar")
    rootSpec.exclude("**/spring-integration-*-4.3.15.RELEASE.jar")
    rootSpec.exclude("**/spring-data-*-1.13.7.RELEASE.jar")
    rootSpec.exclude("**/spring-data-*-1.10.7.RELEASE.jar")
    rootSpec.exclude("**/spring-security-*-4.2.5.RELEASE.jar")

    // remove unused properties files
    rootSpec.exclude("**/application.properties")
    rootSpec.exclude("**/bootstrap.properties")
    rootSpec.exclude("**/application.yml")

    // remove default services from the registry
    exclude('**/Apereo-10000002.json')
    exclude('**/HTTPSandIMAPS-10000001.json')

    baseName 'iam'
    version = project.iamVersion

    manifest {
        from "${buildDir}/libs/iam/META-INF/MANIFEST.MF"
    }

    entryCompression = ZipEntryCompression.STORED
}

task cleaning(type: Delete){
    delete "${buildDir}/libs/iam"
}

unzipFatWar.dependsOn bootRepackage
thinWar.dependsOn unzipFatWar
cleaning.dependsOn thinWar
assemble.dependsOn cleaning
uploadArchives.dependsOn assemble
